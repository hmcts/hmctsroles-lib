{"version":3,"file":"hmctsroles-lib.umd.js.map","sources":["ng://hmctsroles-lib/lib/hmctsroles-lib.service.ts","ng://hmctsroles-lib/lib/directives/roles.directive.ts","ng://hmctsroles-lib/lib/directives/unless-role-includes.directive.ts","ng://hmctsroles-lib/lib/hmctsroles-lib.module.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HmctsrolesLibService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import { Directive, ViewContainerRef, TemplateRef, Input, OnInit } from \"@angular/core\";\r\n\r\n//import { HmctsrolesLibService } from \"../hmctsroles-lib.service\";\r\n\r\n\r\n\r\n\r\n@Directive({\r\n  selector: \"[roleAccess]\"\r\n})\r\nexport class RolesDirective implements OnInit {\r\n  // @Input() roleAccess: string;\r\n  // @Input() roleAccessroleList: string;\r\n\r\n  private _roleAccess: string;\r\n  @Input()\r\n  set roleAccess(value: string) {\r\n    this._roleAccess = value;\r\n    console.log('roleAccess: ', value);\r\n  }\r\n\r\n\r\n  private _roleList: string[];\r\n  @Input()\r\n  set roleAccessRoleList(value: string[]) {\r\n    this._roleList = value;\r\n    console.log('roleList: ', value);\r\n  }\r\n\r\n\r\n\r\n  private _roleSource: string;\r\n  @Input()\r\n  set roleAccessRoleSource(value: string) {\r\n    this._roleSource = value;\r\n    console.log('roleSource: ', value);\r\n  }\r\n\r\n\r\n  isVisible = false;\r\n  roles: any[];\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private templateRef: TemplateRef<any>,\r\n    // private auth: HmctsrolesLibService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    let authorised\r\n\r\n    this.roles = this._roleList;\r\n\r\n    authorised = this.checkRoleisValid()\r\n\r\n    if (authorised)\r\n      this.viewContainerRef.createEmbeddedView(this.templateRef)\r\n\r\n    else\r\n      this.viewContainerRef.clear()\r\n\r\n  }\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this._roleAccess.includes(r))\r\n  }\r\n}\r\n","import { Directive, ElementRef, OnInit, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\n//import { HmctsrolesLibService } from '../hmctsroles-lib.service';\r\n\r\n\r\n@Directive({\r\n  selector: \"[unlessRole]\"\r\n})\r\nexport class UnlessRoleIncludesDirective implements OnInit {\r\n\r\n  @Input() unlessRole: string;\r\n  @Input() roleList: string;\r\n  @Input() roleSource: string;\r\n  roles: any;\r\n\r\n  constructor(\r\n    private elr: ElementRef) { }\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    let authorised\r\n    this.roles = this.roleList.split(',')\r\n\r\n    authorised = this.checkRoleisValid()\r\n\r\n    if (authorised)\r\n      this.elr.nativeElement.style.visibility = 'hidden'\r\n\r\n    else\r\n      this.elr.nativeElement.style.visibility = 'visible'\r\n\r\n  }\r\n\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this.unlessRole.split(',').includes(r))\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RolesDirective } from './directives/roles.directive';\r\nimport { UnlessRoleIncludesDirective } from './directives/unless-role-includes.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [RolesDirective, UnlessRoleIncludesDirective],\r\n  exports: [RolesDirective, UnlessRoleIncludesDirective]\r\n})\r\nexport class HmctsrolesLibModule { }\r\n"],"names":["Injectable","Directive","ViewContainerRef","TemplateRef","Input","ElementRef","NgModule"],"mappings":"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"}
