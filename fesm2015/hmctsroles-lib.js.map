{"version":3,"file":"hmctsroles-lib.js.map","sources":["ng://hmctsroles-lib/lib/hmctsroles-lib.service.ts","ng://hmctsroles-lib/lib/directives/roles.directive.ts","ng://hmctsroles-lib/lib/directives/unless-role-includes.directive.ts","ng://hmctsroles-lib/lib/hmctsroles-lib.module.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HmctsrolesLibService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import { Directive, ViewContainerRef, TemplateRef, Input, OnInit } from \"@angular/core\";\r\n\r\n//import { HmctsrolesLibService } from \"../hmctsroles-lib.service\";\r\n\r\n\r\n\r\n\r\n@Directive({\r\n  selector: \"[roleAccess]\"\r\n})\r\nexport class RolesDirective implements OnInit {\r\n  // @Input() roleAccess: string;\r\n  // @Input() roleAccessroleList: string;\r\n\r\n  private _roleAccess: string;\r\n  @Input()\r\n  set roleAccess(value: string) {\r\n    this._roleAccess = value;\r\n    console.log('roleAccess: ', value);\r\n  }\r\n\r\n\r\n  private _roleList: string[];\r\n  @Input()\r\n  set roleAccessRoleList(value: string[]) {\r\n    this._roleList = value;\r\n    console.log('roleList: ', value);\r\n  }\r\n\r\n\r\n\r\n  private _roleSource: string;\r\n  @Input()\r\n  set roleAccessRoleSource(value: string) {\r\n    this._roleSource = value;\r\n    console.log('roleSource: ', value);\r\n  }\r\n\r\n\r\n  isVisible = false;\r\n  roles: any[];\r\n\r\n  constructor(\r\n    private viewContainerRef: ViewContainerRef,\r\n    private templateRef: TemplateRef<any>,\r\n    // private auth: HmctsrolesLibService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    let authorised\r\n\r\n    this.roles = this._roleList;\r\n\r\n    authorised = this.checkRoleisValid()\r\n\r\n    if (authorised)\r\n      this.viewContainerRef.createEmbeddedView(this.templateRef)\r\n\r\n    else\r\n      this.viewContainerRef.clear()\r\n\r\n  }\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this._roleAccess.includes(r))\r\n  }\r\n}\r\n","import { Directive, ElementRef, OnInit, Input, ViewContainerRef, TemplateRef } from '@angular/core';\r\n//import { HmctsrolesLibService } from '../hmctsroles-lib.service';\r\n\r\n\r\n@Directive({\r\n  selector: \"[unlessRole]\"\r\n})\r\nexport class UnlessRoleIncludesDirective implements OnInit {\r\n\r\n  @Input() unlessRole: string;\r\n  @Input() roleList: string;\r\n  @Input() roleSource: string;\r\n  roles: any;\r\n\r\n  constructor(\r\n    private elr: ElementRef) { }\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    let authorised\r\n    this.roles = this.roleList.split(',')\r\n\r\n    authorised = this.checkRoleisValid()\r\n\r\n    if (authorised)\r\n      this.elr.nativeElement.style.visibility = 'hidden'\r\n\r\n    else\r\n      this.elr.nativeElement.style.visibility = 'visible'\r\n\r\n  }\r\n\r\n\r\n\r\n  checkRoleisValid() {\r\n    return this.roles.some(r => this.unlessRole.split(',').includes(r))\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RolesDirective } from './directives/roles.directive';\r\nimport { UnlessRoleIncludesDirective } from './directives/unless-role-includes.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [RolesDirective, UnlessRoleIncludesDirective],\r\n  exports: [RolesDirective, UnlessRoleIncludesDirective]\r\n})\r\nexport class HmctsrolesLibModule { }\r\n"],"names":[],"mappings":";;;;;;AAAA;IAOE;KACC;;;YANF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;ACJD;AAUA;;;;;IAgCE,YACU,gBAAkC,EAClC,WAA6B;QAD7B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,gBAAW,GAAX,WAAW,CAAkB;QALvC,cAAS,GAAG,KAAK,CAAC;KAOb;;;;;IA/BL,IACI,UAAU,CAAC,KAAa;QAC1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KACpC;;;;;IAID,IACI,kBAAkB,CAAC,KAAe;QACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KAClC;;;;;IAKD,IACI,oBAAoB,CAAC,KAAa;QACpC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KACpC;;;;IAYD,QAAQ;;YACF,UAAU;QAEd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;QAE5B,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEpC,IAAI,UAAU;YACZ,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;;YAG1D,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;KAEhC;;;;IAGD,gBAAgB;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;;;;QAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAA;KAC1D;;;YA3DF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;aACzB;;;YATmB,gBAAgB;YAAE,WAAW;;;yBAe9C,KAAK;iCAQL,KAAK;mCASL,KAAK;;;;;;;AChCR;AAOA;;;;IAOE,YACU,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;KAAK;;;;IAG9B,QAAQ;;YAEF,UAAU;QACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAErC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEpC,IAAI,UAAU;YACZ,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAA;;YAGlD,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAA;KAEtD;;;;IAID,gBAAgB;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;;;;QAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAA;KACpE;;;YAjCF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;aACzB;;;YANmB,UAAU;;;yBAS3B,KAAK;uBACL,KAAK;yBACL,KAAK;;;;;;;ACXR;;;YAIC,QAAQ,SAAC;gBACR,OAAO,EAAE,EAAE;gBACX,YAAY,EAAE,CAAC,cAAc,EAAE,2BAA2B,CAAC;gBAC3D,OAAO,EAAE,CAAC,cAAc,EAAE,2BAA2B,CAAC;aACvD;;;;;;;;;;;;;;;"}
